diff -r dmGWAS-fixed/R/dms_2.4.R dmGWAS/R/dms_2.4.R
367,375c367
<
< # TODO: move this into the manifest!
< # Must be installed by
< # source("https://bioconductor.org/biocLite.R")
< # biocLite("BiocParallel")
<       library(BiocParallel)
<       register(MulticoreParam())
<
<       sublist = bplapply(names(V(G)), function(node) {
---
>       for (node in V(G)$name) {
377,385c369,370
<               if (vcount(ng) < min.size) return (NA)
<               return(ng)
<       })
< # Ensure name attribute is preserved
<       names(sublist) <- names(V(G))
<
< # Clean the list of NA entries
<       na.omit.list <- function(y) { return(y[!sapply(y, function(x) all(is.na(x)))]) }
<       sublist <- na.omit(sublist)
---
>               if (vcount(ng) >= min.size) sublist[[node]] <- ng       #minimum size filtering
>       }
387d371
<
477d460
<
diff -r dmGWAS-fixed/R/globalQueryJ.R dmGWAS/R/globalQueryJ.R
6,12d5
<
< # TODO: move this into the manifest!
< # Must be installed by
< # source("https://bioconductor.org/biocLite.R")
< # biocLite("BiocParallel")
<       library(BiocParallel)
<       register(MulticoreParam())
16,17c9
<
<       sublist = bplapply(names(V(G)), function(node) {
---
>       for (node in V(G)$name) {
19,30c11,14
<               if (vcount(ng) < min.size) return (NA)
<               return(ng)
<       })
<
< # Ensure name attribute is preserved
<       names(sublist) <- names(V(G))
<
< # Clean the list of NA entries
<       na.omit.list <- function(y) { return(y[!sapply(y, function(x) all(is.na(x)))]) }
<       sublist <- na.omit(sublist)
<
<       #}) # time function
---
>             #ng <- seedQueryJ(G, node, search_r, r, lambda=0)
>               if (vcount(ng) >= min.size) sublist[[node]] <- ng       #minimum size filtering
>       }
>       #})
32a17
>
